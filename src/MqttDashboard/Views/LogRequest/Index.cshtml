@using Newtonsoft.Json
@model LogRequestAndResponseModel
@{
    ViewBag.Title = "Create Log Request";
}
<h2>Create Log Request</h2>

@using (Html.BeginForm("Index", "LogRequest", FormMethod.Post))
{
    @Html.AntiForgeryToken()

    <div class="card-body">
        @* TargetId Field *@
        <div class="form-group">
            @Html.LabelFor(model => model.LogRequestModel.TargetId, htmlAttributes: new { @class = "control-label" })
            <div>
                @Html.TextBoxFor(model => model.LogRequestModel.TargetId, new { @class = "form-control", id = "TargetId" })
                @Html.ValidationMessageFor(model => model.LogRequestModel.TargetId, "", new { @class = "text-danger" })
            </div>
        </div>

        @* LogRequestDto Fields *@
        <div class="row">
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.LogRequestModel.LogTypes, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @foreach (var logType in Enum.GetValues(typeof(LogType)))
                        {
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" name="LogRequestModel.LogTypes" value="@logType.ToString()" /> @logType
                                </label>
                            </div>
                        }
                    </div>
                </div>
            </div>
            <div class="col-md-6">
                <div class="form-group">
                    @Html.LabelFor(model => model.LogRequestModel.LogLevels, htmlAttributes: new { @class = "control-label" })
                    <div>
                        @foreach (var logLevel in Enum.GetValues(typeof(LogLevel)))
                        {
                            <div class="checkbox">
                                <label>
                                    <input type="checkbox" name="LogRequestModel.LogLevels" value="@logLevel.ToString()" /> @logLevel
                                </label>
                            </div>
                        }
                    </div>
                </div>
            </div>
        </div>

        <div class="form-group row">
            @Html.LabelFor(model => model.LogRequestModel.IsAckRequired, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                <div class="form-check">
                    <label class="form-check-label">
                        @Html.CheckBoxFor(model => model.LogRequestModel.IsAckRequired, new { @class = "form-check-input" }) Acknowledge Required
                    </label>
                </div>
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LogRequestModel.ActionType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.LogRequestModel.ActionType,
                    new SelectList(Enum.GetValues(typeof(ActionType))),
                    htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LogRequestModel.ActionType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LogRequestModel.ResponseType, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.DropDownListFor(model => model.LogRequestModel.ResponseType,
                    new SelectList(Enum.GetValues(typeof(ResponseType))),
                    htmlAttributes: new { @class = "form-control" })
                @Html.ValidationMessageFor(model => model.LogRequestModel.ResponseType, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LogRequestModel.FromDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LogRequestModel.FromDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LogRequestModel.FromDate, "", new { @class = "text-danger" })
            </div>
        </div>

        <div class="form-group">
            @Html.LabelFor(model => model.LogRequestModel.EndDate, htmlAttributes: new { @class = "control-label col-md-2" })
            <div class="col-md-10">
                @Html.EditorFor(model => model.LogRequestModel.EndDate, new { htmlAttributes = new { @class = "form-control" } })
                @Html.ValidationMessageFor(model => model.LogRequestModel.EndDate, "", new { @class = "text-danger" })
            </div>
        </div>
        <div class="form-group">
            <button type="submit" class="btn btn-outline-primary w-100">
                <i class="bi bi-check-circle"></i> Send
            </button>
        </div>
    </div>
}
<div id="logResponseContainer"> 
    @await Html.PartialAsync("_MqttResponsePartial",Model.LogResponseModel)
</div>

<script src="https://code.jquery.com/jquery-3.6.0.min.js"></script>

<script>
    $(document).ready(function() {
        $('input[name="selectedClients"]').change(function() {
            if ($(this).is(':checked')) {
                var deviceName = $(this).val(); // Get the device name
                $('#TargetId').val(deviceName); // Update the TargetId input field
            }
        });
    });
</script>

@* @model LogResponseModel *@
@* *@
@* @{ *@
@*     ViewData["Title"] = "Log Request"; *@
@* } *@
@* *@
@* <h2>Log Request</h2> *@
@* *@
@* <form asp-action="SendLogRequest" method="post"> *@
@*     <div class="form-group"> *@
@*         <label for="TargetId">Target Id</label> *@
@*         <input id="TargetId" name="LogRequestDto.TargetId" class="form-control" /> *@
@*     </div> *@
@*     <div class="row"> *@
@*         <div class="col-md-6"> *@
@*             <label for="LogTypes">Log Types</label> *@
@*             <div id="LogTypes"> *@
@*                 @foreach (var logType in Enum.GetValues(typeof(MqttDomain.Enums.LogType))) *@
@*                 { *@
@*                     <div class="form-check"> *@
@*                         <input class="form-check-input" type="checkbox" value="@logType" id="LogTypes_@logType" name="LogRequestDto.LogTypes" /> *@
@*                         <label class="form-check-label" for="LogTypes_@logType">@logType</label> *@
@*                     </div> *@
@*                 } *@
@*             </div> *@
@*              *@
@*         </div> *@
@*         <div class="col-md-6"> *@
@*             <label for="LogLevels">Log Levels</label> *@
@*             <div id="LogLevels"> *@
@*                 @foreach (var logLevel in Enum.GetValues(typeof(MqttDomain.Enums.LogLevel))) *@
@*                 { *@
@*                     <div class="form-check"> *@
@*                         <input class="form-check-input" type="checkbox" value="@logLevel" id="LogLevels_@logLevel" name="LogRequestDto.LogLevels" /> *@
@*                         <label class="form-check-label" for="LogLevels_@logLevel">@logLevel</label> *@
@*                     </div> *@
@*                 } *@
@*             </div> *@
@*         </div> *@
@*     </div> *@
@*   *@
@*     <div class="form-group form-check"> *@
@*         <label for="IsAckRequired">Is Acknowledgment Required</label> *@
@*         <input id="IsAckRequired" name="LogRequestDto.IsAckRequired" type="checkbox" class="form-check-input" /> *@
@*     </div> *@
@*   *@
@*     <div class="form-group"> *@
@*         <label for="ActionType">Action Type</label> *@
@*         <select id="ActionType" name="LogRequestDto.ActionType" class="form-control"> *@
@*             @foreach (var actionType in Enum.GetValues(typeof(MqttDomain.Enums.ActionType))) *@
@*             { *@
@*                 <option value="@actionType">@actionType</option> *@
@*             } *@
@*         </select> *@
@*     </div> *@
@*   *@
@*     <div class="form-group"> *@
@*         <label for="ResponseType">Response Type</label> *@
@*         <select id="ResponseType" name="LogRequestDto.ResponseType" class="form-control"> *@
@*             @foreach (var responseType in Enum.GetValues(typeof(MqttDomain.Enums.ResponseType))) *@
@*             { *@
@*                 <option value="@responseType">@responseType</option> *@
@*             } *@
@*         </select> *@
@*     </div> *@
@*   *@
@*     <div class="form-group"> *@
@*         <label for="FromDate">From Date</label> *@
@*         <input id="FromDate" name="LogRequestDto.FromDate" type="datetime-local" class="form-control" /> *@
@*     </div> *@
@*   *@
@*     <div class="form-group"> *@
@*         <label for="EndDate">End Date</label> *@
@*         <input id="EndDate" name="LogRequestDto.EndDate" type="datetime-local" class="form-control" /> *@
@*     </div> *@
@*   *@
@*     <button type="submit" class="btn btn-primary">Send Log Request</button> *@
@* </form> *@
@* <h2>Log Response</h2> *@
@* $1$ <div> #1# *@
@* $1$     @if (Model != null && Model.Messages != null && Model.Messages.Count > 0) #1# *@
@* $1$     { #1# *@
@* $1$         <ul> #1# *@
@* $1$             @foreach (var message in Model.Messages) #1# *@
@* $1$             { #1# *@
@* $1$                 <li>@message</li> #1# *@
@* $1$             } #1# *@
@* $1$         </ul> #1# *@
@* $1$     } #1# *@
@* $1$     else #1# *@
@* $1$     { #1# *@
@* $1$         <p>No responses yet.</p> #1# *@
@* $1$     } #1# *@
@* $1$ </div> #1# *@
@* <div id="logResponseContainer"> *@
@*     @await Html.PartialAsync("_MqttResponsePartial",Model) *@
@* </div> *@
@* *@
@* <script> *@
@*     $(document).ready(function() { *@
@*         $('input[name="selectedClients"]').change(function() { *@
@*             if ($(this).is(':checked')) { *@
@*                 var deviceName = $(this).val(); // Get the device name *@
@*                 $('#TargetId').val(deviceName); // Update the TargetId input field *@
@*             } *@
@*         }); *@
@*     }); *@
@* </script> *@